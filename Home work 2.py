'''
1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа
данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать
у пользователя, а указать явно, в программе.
'''
a = ['H', 'a', 'l', 'l', 'o', 2021, 'Jhar', True, False, {'Jhar': 2021}]
for i in a:
    print(type(i))
'''
2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 
0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка 
элементов необходимо использовать функцию input().
'''
spisok = []
a = int(input('Введите количество элементов в списе'))
for i in range(0, a):
    element = int(input('Введите число'))
    spisok.append(element)
print(spisok)

j = 0
for i in range(int(len(spisok) / 2)):
    spisok[j], spisok[j + 1] = spisok[j + 1], spisok[j]
    j += 2
print(spisok)

'''
 3.Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится
месяц (зима, весна, лето, осень). Напишите решения через list и через dict.
Решение через  list
'''
# решение через List
mont = int(input('Введите номер месяца (целое число):'))
jahr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
if mont in jahr[2 : 5]:
    print('Весна')
elif mont in jahr[5 : 8]:
    print('Лето')
elif mont in jahr[8 : 11]:
    print('Осень')
else:
    print('Зима')

# Решение через Dict

mont = int(input('Введите номер месяца (целое число):'))
jahr = {1:'Зима', 2:'Зима', 3:'Весна', 4:'Весна', 5:'Весна', 6:'Лето', 7:'Лето', 8:'Лето', 9:'Осень',
        10:'Осень', 11:'Осень', 12:'Зима'}
print(jahr.get(mont))


'''
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки.
Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
'''

satze = input('Что бы вы хотели мне сказать? (введите предложение):')
for count,value in enumerate(satze.split(), 1):
    if len(value) <= 10:
        print(count, value)
    else:
        print(count, value[0:10])

'''
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел.
У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми 
значениями, то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
'''

my_list = [4, 1, 2, 7, 7, 5, 6, 6]
new = int(input('Введите новый элемент (натуральное число) рейтинга '))
my_list.append(new)
my_list.sort(reverse = True)
print(my_list)



'''
6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит 
информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами 
(характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно, 
т.е. запрашивать все данные у пользователя.
Пример готовой структуры:
[

(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})

]
Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, 
например название, а значение — список значений-характеристик, например список названий товаров.
Пример:
{

“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]

}
'''

#
storadg = []
i = 1
while True:
    storage.append(
        (input('Введите номер товара: '), dict({
            'название': str(input('Введите название: ')),
            'цена': float(input('Введите цену: ')),
            'количество': int(input('Введите количество: ')),
            'eд': str(input('Введите единцы измерения: ')),
        }))
    )

    if input('Товар добавлен. Добавить еще один товар? (да/нет): ') == 'нет':
        break

    i += 1

print(f'список товаров:{storage}')

output_storage = dict({})
for product in storage:
    for key, value in product[-1].items():
        if key in output_storage:
            if value not in output_storage.get(key):
                output_storage.get(key).append(value)
        else:
            output_storage.update({key: [value]})


print(f'собрана аналитика: {output_storage}')
